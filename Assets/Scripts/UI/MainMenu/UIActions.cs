//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input/UIActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIActions"",
    ""maps"": [
        {
            ""name"": ""UIInputs"",
            ""id"": ""992b8ce7-8164-470e-9148-ac6297dff6b6"",
            ""actions"": [
                {
                    ""name"": ""UIMovement"",
                    ""type"": ""Button"",
                    ""id"": ""49d2709a-3c2e-4bc3-bb62-413abd33943e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c875f45-19e0-4acf-92ad-8adaf004e215"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6103881-bc3d-4a1e-8270-5b97ba534bf6"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""997897a6-2b36-401f-8e59-b9b513056e16"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58f5ac4e-6ac5-4da0-aca0-43f8d9099f29"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UIInputs
        m_UIInputs = asset.FindActionMap("UIInputs", throwIfNotFound: true);
        m_UIInputs_UIMovement = m_UIInputs.FindAction("UIMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UIInputs
    private readonly InputActionMap m_UIInputs;
    private List<IUIInputsActions> m_UIInputsActionsCallbackInterfaces = new List<IUIInputsActions>();
    private readonly InputAction m_UIInputs_UIMovement;
    public struct UIInputsActions
    {
        private @UIActions m_Wrapper;
        public UIInputsActions(@UIActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UIMovement => m_Wrapper.m_UIInputs_UIMovement;
        public InputActionMap Get() { return m_Wrapper.m_UIInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIInputsActions set) { return set.Get(); }
        public void AddCallbacks(IUIInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_UIInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIInputsActionsCallbackInterfaces.Add(instance);
            @UIMovement.started += instance.OnUIMovement;
            @UIMovement.performed += instance.OnUIMovement;
            @UIMovement.canceled += instance.OnUIMovement;
        }

        private void UnregisterCallbacks(IUIInputsActions instance)
        {
            @UIMovement.started -= instance.OnUIMovement;
            @UIMovement.performed -= instance.OnUIMovement;
            @UIMovement.canceled -= instance.OnUIMovement;
        }

        public void RemoveCallbacks(IUIInputsActions instance)
        {
            if (m_Wrapper.m_UIInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_UIInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIInputsActions @UIInputs => new UIInputsActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IUIInputsActions
    {
        void OnUIMovement(InputAction.CallbackContext context);
    }
}
